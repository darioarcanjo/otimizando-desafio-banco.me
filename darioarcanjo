from typing import List, Dict, Union

# Estruturas para usuários e contas
usuarios: List[Dict[str, Union[str, int]]] = []
contas: List[Dict[str, Union[str, int]]] = []
numero_da_conta_sequencial: int = 1  # Controla o número sequencial das contas

def criar_usuario(nome: str, data_nascimento: str, cpf: str, endereco: str) -> None:
    """Cadastra um novo usuário com nome, data de nascimento, CPF e endereço."""
    # Armazenar somente os números do CPF
    cpf = ''.join(filter(str.isdigit, cpf))

    # Verifica se o CPF já está cadastrado
    if any(usuario['cpf'] == cpf for usuario in usuarios):
        print("Usuário já cadastrado com este CPF.")
        return
    
    # Cria um dicionário para o usuário
    usuario = {
        "nome": nome,
        "data_nascimento": data_nascimento,
        "cpf": cpf,
        "endereco": endereco
    }
    
    usuarios.append(usuario)
    print(f"Usuário {nome} cadastrado com sucesso!")

def criar_conta_corrente(cpf: str) -> None:
    """Cadastra uma nova conta corrente vinculada a um usuário existente."""
    global numero_da_conta_sequencial
    
    # Filtra a lista de usuários buscando o CPF informado
    usuario = next((usuario for usuario in usuarios if usuario['cpf'] == cpf), None)
    if not usuario:
        print("Usuário não encontrado. Cadastre o usuário primeiro.")
        return

    # Cria um dicionário para a conta
    conta = {
        "agencia": "0001",
        "numero_conta": numero_da_conta_sequencial,
        "usuario": usuario  # Vincula a conta ao usuário
    }
    
    contas.append(conta)
    print(f"Conta {conta['numero_conta']} cadastrada com sucesso para o usuário {usuario['nome']}!")
    
    numero_da_conta_sequencial += 1  # Incrementa o número da conta para a próxima

def listar_contas() -> None:
    """Lista todas as contas cadastradas."""
    if not contas:
        print("Não há contas cadastradas.")
        return
    print("\n================= CONTAS CADASTRADAS =================")
    for conta in contas:
        usuario_nome = conta["usuario"]["nome"]
        print(f"Conta: {conta['numero_conta']}, Agência: {conta['agencia']}, Titular: {usuario_nome}")
    print("=========================================================")

def depositar(numero_conta: int, valor: float) -> dict:
    """Realiza um depósito na conta especificada e retorna o saldo e extrato atualizados."""
    conta = next((conta for conta in contas if conta["numero_conta"] == numero_conta), None)
    if conta is None:
        print("Conta não encontrada.")
        return {"saldo": None, "extrato": None}
    
    # Chamada à função para realizar o depósito
    resultado = realizar_deposito(
        conta.get("saldo", 0),
        valor,
        conta.get("extrato", "")
    )
    
    # Atualiza a conta com os novos valores de saldo e extrato
    if resultado["saldo"] is not None:
        conta["saldo"] = resultado["saldo"]
        conta["extrato"] = resultado["extrato"]
        print("Depósito realizado com sucesso!")

    return resultado

def realizar_deposito(saldo: float, valor: float, extrato: str) -> dict:
    """Realiza a operação de depósito e retorna saldo e extrato atualizados."""
    if valor <= 0:
        print("Operação falhou! O valor informado é inválido.")
        return {"saldo": None, "extrato": extrato}
    
    saldo += valor
    extrato += f"Depósito: R$ {valor:.2f}\n"
    
    return {"saldo": saldo, "extrato": extrato}

def sacar(numero_conta: int, valor: float) -> dict:
    """Realiza um saque da conta especificada e retorna saldo e extrato."""
    conta = next((conta for conta in contas if conta["numero_conta"] == numero_conta), None)
    if conta is None:
        print("Conta não encontrada.")
        return {"saldo": None, "extrato": None}
    
    # Chamada à função para realizar o saque
    resultado = realizar_saque(
        saldo=conta.get("saldo", 0),
        valor=valor,
        extrato=conta.get("extrato", ""),
        limite=conta.get("limite", 500),
        numero_saques=conta.get("numero_saques", 0),
        limite_saques=conta.get("LIMITE_SAQUES", 3)
    )
    
    # Atualiza a conta com os novos valores de saldo e extrato, se o saque for bem-sucedido
    if resultado["saldo"] is not None:
        conta["saldo"] = resultado["saldo"]
        conta["extrato"] = resultado["extrato"]
        conta["numero_saques"] = conta.get("numero_saques", 0) + 1
        print("Saque realizado com sucesso!")
    
    return resultado

def realizar_saque(*, saldo: float, valor: float, extrato: str, limite: float, numero_saques: int, limite_saques: int) -> dict:
    """Verifica se o saque é válido e retorna saldo e extrato atualizados."""
    if valor > saldo:
        print("Operação falhou! Você não tem saldo suficiente.")
        return {"saldo": None, "extrato": extrato}
    elif valor > limite:
        print("Operação falhou! O valor do saque excede o limite.")
        return {"saldo": None, "extrato": extrato}
    elif numero_saques >= limite_saques:
        print("Operação falhou! Número máximo de saques excedido.")
        return {"saldo": None, "extrato": extrato}
    elif valor <= 0:
        print("Operação falhou! O valor informado é inválido.")
        return {"saldo": None, "extrato": extrato}

    # Se tudo estiver certo, realiza o saque
    saldo -= valor
    extrato += f"Saque: R$ {valor:.2f}\n"
    
    return {"saldo": saldo, "extrato": extrato}

def exibir_extrato(saldo: float, *, extrato: str) -> None:
    """Exibe o extrato da conta com o saldo disponível."""
    print("\n================ EXTRATO ================")
    print("Não foram realizadas movimentações." if not extrato else extrato)
    print(f"\nSaldo: R$ {saldo:.2f}")
    print("==========================================")

def visualizar_historico(numero_conta: int) -> None:
    """Exibe o extrato da conta."""
    conta = next((conta for conta in contas if conta["numero_conta"] == numero_conta), None)
    if conta is None:
        print("Conta não encontrada.")
        return
    exibir_extrato(conta.get("saldo", 0), extrato=conta.get("extrato", ""))

# Menu principal
def main() -> None:
    while True:
        menu = """
        [1] Criar Usuário
        [2] Criar Conta Corrente
        [3] Listar Contas
        [d] Depositar
        [s] Sacar
        [e] Visualizar Histórico
        [q] Sair

        => """
        
        opcao = input(menu)

        if opcao == "1":
            nome = input("Informe o nome do usuário: ")
            data_nascimento = input("Informe a data de nascimento (DD/MM/AAAA): ")
            cpf = input("Informe o CPF do usuário (apenas números): ")
            endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")
            criar_usuario(nome, data_nascimento, cpf, endereco)
        elif opcao == "2":
            cpf = input("Informe o CPF do usuário: ")
            criar_conta_corrente(cpf)
        elif opcao == "3":
            listar_contas()
        elif opcao == "d":
            numero_conta = int(input("Informe o número da conta: "))
            valor = float(input("Informe o valor do depósito: "))
            resultado = depositar(numero_conta, valor)
            if resultado["saldo"] is not None:
                print(f"Saldo atual: R$ {resultado['saldo']:.2f}")
                print("Extrato atualizado:")
                print(resultado["extrato"])
        elif opcao == "s":
            numero_conta = int(input("Informe o número da conta: "))
            valor = float(input("Informe o valor do saque: "))
            resultado = sacar(numero_conta, valor)
            if resultado["saldo"] is not None:
                print(f"Saldo atual: R$ {resultado['saldo']:.2f}")
                print("Extrato atualizado:")
                print(resultado["extrato"])
        elif opcao == "e":
            numero_conta = int(input("Informe o número da conta: "))
            visualizar_historico(numero_conta)
        elif opcao == "q":
            print("Saindo...")
            break
        else:
            print("Operação inválida, por favor selecione novamente a operação desejada.")

if __name__ == "__main__":
    main()
